#!/bin/env php
<?php

// Initialise variables
$pwd = $_SERVER['PWD'];
$projectName = basename($pwd);
// Warn if we do not have a valid project name
if (!strlen($projectName)) {
    trigger_error("Could not detect project name", E_USER_WARNING);
}
$tempDir = "/tmp/civicrm-docker-dump.$projectName";
$dumpScript = "/tmp/civicrm-docker-dump.$projectName.sync.sh";

// Load definition from json
$definitionFile = "$pwd/civicrm-docker-dump-manual.json";
$definition = json_decode(file_get_contents($definitionFile), 1);


// Create temp directory
$lines[] = "rm -rf {$tempDir}";
$lines[] = "mkdir {$tempDir}";

// Dump databases
foreach ($definition['databases'] as $dbKey => $database) {
    if (isset($database['defaults_extra_file'])) {
        $lines[] = "ssh {$projectName} mysqldump --defaults-extra-file={$database['defaults_extra_file']} --skip-triggers {$database['name']} > {$tempDir}/{$dbKey}.sql";
    } else {
        $lines[] = "ssh {$projectName} mysqldump --skip-triggers {$database['name']} > {$tempDir}/{$dbKey}.sql";
    }
}

// Tar files
foreach ($definition['directories'] as $dirKey => $directory) {
    $lines[] = "ssh {$projectName} tar -cz -C {$directory['src']} . > {$tempDir}/{$dirKey}.tar.gz";
}

// Generate state.json
$lines[] = "cat << EOF > {$tempDir}/state.json";
$state = [
    'project' => $projectName,
    'databases' => array_keys($definition['databases']),
    'directories' => array_map(function ($dir) {
        return $dir['dest'];
    }, $definition['directories']),
];
$lines[] = json_encode($state, JSON_PRETTY_PRINT);
$lines[] = "EOF";
$lines[] = "OUTFILE={$projectName}.$(date +%Y%m%dT%H%M%S).tar.gz";
$lines[] = "tar -cz -C {$tempDir} . -f {$pwd}/state/\${OUTFILE}";
$lines[] = "echo \$OUTFILE";
$lines[] = "rm -rf {$tempDir}";

// Abort if we have encountered any errors (e.g. due to missing variables in
// the json definition, etc.)
if (error_get_last()) {
    echo "Some errors occured - aborting manual dump.\n";
    exit;
}
file_put_contents($dumpScript, implode("\n", $lines) . "\n");
shell_exec("bash $dumpScript");
unlink($dumpScript);
