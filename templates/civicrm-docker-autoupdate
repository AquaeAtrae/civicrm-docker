#!/bin/env cv scr
<?php

/**
 * Usage:
 *
 * > civicrm-docker-autoupdate [civicrm|civicrm-extensions|cms|cms-addons]
 *  
 * @examples:
 * 
 * # Update CiviCRM and CMS
 * > civicrm-docker-autoupdate civicrm cms
 * 
 * # Update only the CMS
 * > civicrm-docker-autoupdate cms
 */

const KNOWN_SYSTEMS = ['civicrm', 'civicrm-extensions', 'cms', 'cms-addons'];

if (!isset($argv)) {
    $systems = KNOWN_SYSTEMS;
} else {
    $systems = array_intersect(
        KNOWN_SYSTEMS,
        array_slice($argv, 1)
    );
}

class AutoUpdate {
    private $config;
    private $cms;
    private $versions;

    public function __construct(array $systems)
    {
        $this->config = CRM_Core_Config::singleton();

        $this->versions = [
            'current' => [],
            'latest' => [],
        ];

        foreach ($systems as $system) {
            $this->versions['current'] = $this->getCurrent($system);
            $this->versions['latest'] = $this->getLatest($system);
        }

        $this->cms = $this->getCMS();
    }

    public function getCMS()
    {
        return strtolower(getenv('CIVICRM_UF'));
    }
    
    public function getLatest(string $system)
    {
        switch($system) {
            case 'civicrm':
                return file_get_contents('https://latest.civicrm.org/stable.php');
            case 'civicrm-extensions':
                $extensions = \CRM_Extension_System::singleton()->getBrowser()->getExtensions();
                $statuses = \CRM_Extension_System::singleton()->getManager()->getStatuses();
                $mapper = \CRM_Extension_System::singleton()->getMapper();

                $installed = array_filter($extensions, function($extension) use($statuses) {
                    return isset($statuses[$extension->key]) && $statuses[$extension->key] === 'installed';
                });

                return array_map(
                    function($extension) { return $extension->version; },
                    $installed
                );
            case "cms":
                // TODO
                break;
            case "cms-addons":
                // TODO
                break;
        }
    }

    public function getCurrent(string $system)
    {
        switch($system) {
            case 'civicrm':
                // TODO
                break;
            case 'civicrm-extensions':
                // TODO
                break;
            case "cms":
                return $this->config->userSystem->getVersion();
            case "cms-addons":
                // TODO
                break;
        }
    }

    public function getLinkToLatest(string $system)
    {
        switch($system) {
            case "civicrm":
                $latest = self::getLatest("civicrm");
                $cms = $this->cms;
                return "https://download.civicrm.org/civicrm-$latest-$cms.tar.gz";
            case "civicrm-extensions":
                $extensions = \CRM_Extension_System::singleton()->getBrowser()->getExtensions();
                $statuses = \CRM_Extension_System::singleton()->getManager()->getStatuses();
                $mapper = \CRM_Extension_System::singleton()->getMapper();

                $installed = array_filter($extensions, function($extension) use($statuses) {
                    return isset($statuses[$extension->key]) && $statuses[$extension->key] === 'installed';
                });

                $links = array_map(
                    function($extension) { return $extension->downloadUrl; },
                    $installed
                );

                return $links;
            case "cms":
                // TODO
                break;
            case "cms-addons":
                // TODO
                break;
        }
    }

    public function getPath(string $system)
    {
        switch($system) {
            case 'civicrm':
                return system("cv path -d '[civicrm.root]'");
            case 'civicrm-extensions':
                $extensions = \CRM_Extension_System::singleton()->getBrowser()->getExtensions();
                $statuses = \CRM_Extension_System::singleton()->getManager()->getStatuses();
                $mapper = \CRM_Extension_System::singleton()->getMapper();

                $installed = array_filter($extensions, function($extension) use($statuses) {
                    return $statuses[$extension->key] === 'installed';
                });

                $paths = array_map(
                    function($extension) use($mapper) {
                        return $mapper->keyToBasePath($extension->key);
                    },
                    $installed
                );

                return $paths;
            case "cms":
                // TODO
                break;
            case "cms-addons":
                // TODO
                break;
        }
    }
}

$updater = new AutoUpdate($systems);

foreach($systems as $system) {
    echo "Updating $system\n";
    echo "- Path: " . json_encode($updater->getPath($system), JSON_PRETTY_PRINT) . "\n";
    echo "- Current version: " . json_encode($updater->getCurrent($system), JSON_PRETTY_PRINT) . "\n";
    echo "- Latest version: " . json_encode($updater->getLatest($system), JSON_PRETTY_PRINT) . "\n";
    echo "- Download link: " . json_encode($updater->getLinkToLatest($system), JSON_PRETTY_PRINT) . "\n";
    // TODO: update $system
}