#!/usr/bin/env php
<?php

/**
 * Usage:
 *
 * > civicrm-docker-autoupdate [civicrm|civicrm-extensions|cms|cms-addons]
 *  
 * @examples:
 * 
 * # Update CiviCRM and CMS
 * > civicrm-docker-autoupdate civicrm cms
 * 
 * # Update only the CMS
 * > civicrm-docker-autoupdate cms
 */

eval(shell_exec('cv php:boot'));

const KNOWN_SYSTEMS = ['civicrm', 'civicrm-extensions', 'cms', 'cms-addons'];

if (!defined('DRUPAL_ROOT')) {
    define('DRUPAL_ROOT', getcwd());
}

class AutoUpdate {
    private $config;
    private $systems;

    public function __construct(array $systems)
    {
        $this->config = CRM_Core_Config::singleton();

        $this->systems = [];
        foreach(KNOWN_SYSTEMS as $system) {
            if (in_array($system, $systems)) {
                $this->systems[] = $system;
            }
        }
    }

    public function clear()
    {
        unset($this->civicrm);
        unset($this->cms);
        unset($this->extensions);
        unset($this->addons);
    }

    public function getAll()
    {
        if (in_array('civicrm-extensions', $this->systems)) {
            $this->getCiviCRMExtensions();
        }

        if (in_array('cms-addons', $this->systems)) {
            $this->getCMSAddons();
        }

        foreach ($this->systems as $system) {
            $this->getCurrent($system);
            $this->getLatest($system);
            $this->getDownloadLink($system);
            $this->getPath($system);
            // $this->getHistory($system);
        }

        return $this->toArray();
    }

    public function getCMS()
    {
        if (!isset($this->cms['name'])) {
            $cms = strtolower(getenv('CIVICRM_UF'));
            $this->cms['name'] = $cms;
            $this->$cms = &$this->cms;
        }

        return $this->cms['name'];
    }

    public function getCiviCRMExtensions()
    {
        if (!isset($this->extensions)) {
            $extensions = CRM_Extension_System::singleton()->getBrowser()->getExtensions();
            $statuses = CRM_Extension_System::singleton()->getManager()->getStatuses();
            $this->extensions = array_filter($extensions,
                function($extension) use($statuses) {
                    return isset($statuses[$extension->key]) &&
                        $statuses[$extension->key] === 'installed';
                }
            );    
        }
        return $this->extensions;
    }

    public function getCMSAddons()
    {
        // TODO: WordPress && Drupal-8
        if ($this->getCMS() === 'drupal')
        {
            return $this->getDrupalModules();
        }
    }

    public function getDrupalModules()
    {
        if (!isset($this->addons)) {
            if ($this->getCMS() === 'drupal') {
                $addons = update_get_available();
                foreach ($addons as $key => $addon) {
                    if (in_array($key, ['civicrm', 'drupal'])) {
                        unset($addons[$key]);
                        continue;
                    }
                    $addons[$key]['info'] = system_get_info('module', $key);
                    $addons[$key]['path'] = realpath(drupal_get_path('module', $key));
                }
            }
    
            $this->addons = $addons;
        }

        return $this->addons;
    }

    public function getHistory(string $system)
    {
        if (!isset($this->history[$system])) {
            try {
                $this->history[$system] =
                    shell_exec(
                        'git log --pretty=format:"%h%x09%an%x09%ad%x09%s" --follow -- ' .
                        $this->getPath($system)
                    );
            } catch(Exception $e) {}
        }

        return $this->history[$system];
    }
    
    public function getLatest(string $system)
    {
        if ($system === 'civicrm') {
            if (!isset($this->civicrm['latest'])) {
                $this->civicrm['latest'] = file_get_contents('https://latest.civicrm.org/stable.php');
            }
            
            return $this->civicrm['latest'];
        }

        if ($system === 'civicrm-extensions') {
            foreach ($this->extensions as $key => $extension) {
                if (!isset($this->extensions[$key]->latest)) {
                    $this->extensions[$key]->latest = $extension->version;
                }
            }

            return array_map(
                function($extension) { return $extension->latest; },
                $this->extensions
            );
        }

        if ($system === 'cms') {
            if (!isset($this->cms['current'])) {
                $this->cms['current'] = $this->config->userSystem->getVersion();
            }

            return $this->cms['current'];
        }

        if ($system === 'cms-addons') {
            foreach ($this->addons as $key => $addon) {
                if (!isset($this->addons[$key]['latest'])) {
                    $this->addons[$key]['latest'] = reset($addon['releases'])['version'];
                }
            }

            return array_map(
                function($addon) { return $addon['latest']; },
                $this->addons
            );
        }
    }

    public function getCurrent(string $system)
    {
        if ($system === 'civicrm') {
            if (!isset($this->civicrm['current'])) {
                $this->civicrm['current'] = CRM_Utils_System::version();
            }

            return $this->civicrm['current'];
        }

        if ($system === 'civicrm-extensions') {
            foreach ($this->extensions as $key => $extension) {
                if (!isset($this->extensions[$key]->current)) {
                    $path = $this->getPath($system)[$key]['path'];
                    try {
                        $info = CRM_Extension_Info::loadFromFile($path . '/info.xml');
                    } catch(Exception $e) {
                        continue;
                    }
                    $this->extensions[$key]->current = $info->version;
                }    
            }

            return array_map(
                function($extension) { return $extension->current; },
                $this->extensions
            );
        }

        if ($system === 'cms') {
            if (!isset($this->cms['current'])) {
                $this->cms['current'] = $this->config->userSystem->getVersion();
            }

            return $this->cms['current'];
        }

        if ($system === 'cms-addons') {
            foreach ($this->addons as $key => $addon) {
                if (!isset($this->addons[$key]['current'])) {
                    $this->addons[$key]['current'] = $addon['info']['version'];
                }
            }

            return array_map(
                function($addon) { return $addon['current']; },
                $this->addons
            );
        }
    }

    public function getDownloadLink(string $system)
    {
        if ($system === 'civicrm') {
            if (!isset($this->civicrm['download_link'])) {
                $latest = self::getLatest("civicrm");
                $cms = $this->cms['name'];
                $this->civicrm['download_link'] =
                    "https://download.civicrm.org/civicrm-$latest-$cms.tar.gz";
            }

            return $this->civicrm['download_link'];
        }

        if ($system === 'civicrm-extensions') {
            foreach ($this->extensions as $key => $extension) {
                if (!isset($this->extensions[$key]->download_link)) {
                    $this->extensions[$key]->download_link = $extension->downloadUrl;
                }    
            }

            return array_map(
                function($extension) { return $extension->download_link; },
                $this->extensions
            );
        }

        if ($system === 'cms') {
            if (!isset($this->cms['download_link'])) {
                if ($this->getCMS() === 'drupal') {
                    $drupal = update_get_available()['drupal'];
                    $releases = $drupal['releases'];
                    $this->cms['download_link'] = reset($releases)['download_link'];
                }
            }

            return $this->cms['download_link'];
        }

        if ($system === 'cms-addons') {
            foreach ($this->addons as $key => $addon) {
                if (!isset($this->addons[$key]['download_link'])) {
                    $this->addons[$key]['download_link'] = reset($addon['releases'])['download_link'];
                }
            }

            return array_map(
                function($addon) { return $addon['download_link']; },
                $this->addons
            );
        }
    }

    public function getPath(string $system)
    {
        if ($system === 'civicrm') {
            if (!isset($this->civicrm['full_path'])) {
                $this->civicrm['full_path'] = shell_exec("cv path -d '[civicrm.root]'");
            }

            return $this->civicrm['full_path'];
        }

        if ($system === 'civicrm-extensions') {
            foreach ($this->extensions as $key => $extension) {
                if (!isset($this->extensions[$key]->full_path)) {
                    $mapper = \CRM_Extension_System::singleton()->getMapper();
                    $this->extensions[$key]->full_path = $mapper->keyToBasePath($extension->key);
                }    
            }

            return array_map(
                function($extension) { return $extension->full_path; },
                $this->extensions
            );
        }

        if ($system === 'cms') {
            if (!isset($this->cms['full_path'])) {
                if ($this->getCMS() === 'drupal') {
                    $this->cms['full_path'] = DRUPAL_ROOT;
                }
            }

            return $this->cms['full_path'];
        }

        if ($system === 'cms-addons') {
            foreach ($this->addons as $key => $addon) {
                if (!isset($this->addons[$key]['full_path'])) {
                    $this->addons[$key]['full_path'] = $addon['path'];
                }
            }

            return array_map(
                function($addon) { return $addon['full_path']; },
                $this->addons
            );
        }
    }

    public function toArray()
    {
        $array = [
            'civicrm' => $this->civicrm,
            'civicrm-extensions' => array_map(
                function($extension) {
                    return [
                        'current' => $extension->version,
                        'latest' => $extension->latest,
                        'download_link' => $extension->download_link,
                        'path' => $extension->full_path,
                    ];
                },
                $this->extensions
            ),
            'cms' => $this->cms,
            'cms-addons' => array_map(
                function($addon) {
                    return [
                        'current' => $addon['current'],
                        'latest' => $addon['latest'],
                        'download_link' => $addon['download_link'],
                        'path' => $addon['full_path'],
                    ];
                },
                $this->addons
            ),
        ];

        return $array;
    }

    public function toJson()
    {
        return json_encode($this->toArray(), JSON_PRETTY_PRINT);
    }

    public function __toString()
    {
        return $this->toJson();
    }
}

if (!count(array_slice($argv, 1))) {
    $systems = KNOWN_SYSTEMS;
} else {
    $systems = array_intersect(
        KNOWN_SYSTEMS,
        array_slice($argv, 1)
    );
}

$updater = new AutoUpdate($systems);
$updater->getAll();
echo (string) $updater;