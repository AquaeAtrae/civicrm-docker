#!/usr/bin/env php
<?php

/**
 * Usage:
 *
 * > civicrm-docker-autoupdate [civicrm|civicrm-extensions|cms|cms-addons]
 *  
 * @examples:
 * 
 * # Update CiviCRM and CMS
 * > civicrm-docker-autoupdate civicrm cms
 * 
 * # Update only the CMS
 * > civicrm-docker-autoupdate cms
 */

eval(shell_exec('cv php:boot'));

const KNOWN_SYSTEMS = ['civicrm', 'civicrm-extensions', 'cms', 'cms-addons'];

class AutoUpdate {
    private $config;
    private $cms;
    private $versions;
    private $history;
    private $installed;

    public function __construct(array $systems)
    {
        $this->reboot();

        foreach ($systems as $system) {
            $this->versions['current'][$system] = $this->getCurrent($system);
            $this->versions['latest'][$system] = $this->getLatest($system);
        }
    }

    public function reboot()
    {
        $this->config = CRM_Core_Config::singleton();
        $extensions = \CRM_Extension_System::singleton()->getBrowser()->getExtensions();
        $statuses = \CRM_Extension_System::singleton()->getManager()->getStatuses();

        $this->cms = $this->getCMS();

        $this->installed = [
            'extensions' => array_filter($extensions,
                function($extension) use($statuses) {
                    return isset($statuses[$extension->key]) &&
                        $statuses[$extension->key] === 'installed';
                }
            ),
            'addons' => [],
        ];

        if ($this->cms === 'drupal') {
            $addons = update_get_available();
            $this->installed['addons'] = $addons;
            foreach ($addons as $key => $addon) {
                if (in_array($key, ['civicrm', 'drupal'])) {
                    unset($this->installed['addons'][$key]);
                    continue;
                }
                $this->installed['addons'][$key]['info'] =
                    system_get_info('module', $key);
                $this->installed['addons'][$key]['path'] =
                    realpath(drupal_get_path('module', $key));
            }
        }

        $this->versions = [
            'current' => [],
            'latest' => [],
        ];
        $this->history = [];
    }

    public function getCMS()
    {
        if (!isset($this->cms)) {
            $this->cms = strtolower(getenv('CIVICRM_UF'));
        }
        return $this->cms;
    }

    public function getHistory(string $system)
    {
        if (!isset($this->history[$system])) {
            $this->history[$system] =
                shell_exec('git log --pretty=format:"%h%x09%an%x09%ad%x09%s" --follow -- ' .
                $this->getPath($system)
            );
        }
        return $this->history[$system];
    }
    
    public function getLatest(string $system)
    {
        switch($system) {
            case 'civicrm':
                if (!isset($this->versions['latest'][$system])) {
                    $this->versions['latest'][$system] =
                        file_get_contents('https://latest.civicrm.org/stable.php');
                }
                break;
            case 'civicrm-extensions':
                if (!isset($this->versions['latest'][$system])) {
                    $this->versions['latest'][$system] =
                        array_map(
                            function($extension) { return $extension->version; },
                            $this->installed['extensions']
                        );
                }
                break;
            case "cms":
                // TODO
                break;
            case "cms-addons":
                if (!isset($this->versions['latest'][$system])) {
                    $this->versions['latest'][$system] =
                        array_map(
                            function($addon) { return reset($addon['releases'])['version']; },
                            $this->installed['addons']
                        );
                }
                break;
        }
        return $this->versions['latest'][$system];
    }

    public function getCurrent(string $system)
    {
        switch($system) {
            case 'civicrm':
                if (!isset($this->versions['current'][$system])) {
                    $this->versions['current'][$system] = CRM_Utils_System::version();
                }
                break;
            case 'civicrm-extensions':
                // TODO
                break;
            case "cms":
                if (!isset($this->versions['current'][$system])) {
                    $this->versions['current'][$system] = $this->config->userSystem->getVersion();
                }
                break;
            case "cms-addons":
                if (!isset($this->versions['current'][$system])) {
                    $this->versions['current'][$system] =
                        array_map(
                            function($addon) { return $addon['info']['version']; },
                            $this->installed['addons']
                        );
                }
                break;
        }
        return $this->versions['current'][$system];
    }

    public function getLinkToLatest(string $system)
    {
        switch($system) {
            case "civicrm":
                $latest = self::getLatest("civicrm");
                $cms = $this->cms;
                return "https://download.civicrm.org/civicrm-$latest-$cms.tar.gz";
            case "civicrm-extensions":
                $links = array_map(
                    function($extension) { return $extension->downloadUrl; },
                    $this->installed['extensions']
                );

                return $links;
            case "cms":
                // TODO
                break;
            case "cms-addons":
                if (!isset($this->versions['latest'][$system])) {
                    $this->versions['latest'][$system] =
                        array_map(
                            function($addon) { return reset($addon['releases'])['download_link']; },
                            $this->installed['addons']
                        );
                }
                break;
        }
    }

    public function getPath(string $system)
    {
        switch($system) {
            case 'civicrm':
                return shell_exec("cv path -d '[civicrm.root]'");
            case 'civicrm-extensions':
                return array_map(
                    function($extension) {
                        $mapper = \CRM_Extension_System::singleton()->getMapper();
                        return $mapper->keyToBasePath($extension->key);
                    },
                    $this->installed['extensions']
                );
            case "cms":
                // TODO
                break;
            case "cms-addons":
                return array_map(
                    function($addon) { return $addon['path']; },
                    $this->installed['addons']
                );
                break;
        }
    }
}

function asString($input)
{
    if (gettype($input) === "string") {
        return "- $input";
    }

    $string = '';
    foreach ($input as $key => $value) {
        $string .= "- $key: $value\n";
    }

    return $string;
}

if (!isset($argv)) {
    $systems = KNOWN_SYSTEMS;
} else {
    $systems = array_intersect(
        KNOWN_SYSTEMS,
        array_slice($argv, 1)
    );
}

$updater = new AutoUpdate($systems);

foreach($systems as $system) {
    echo "# " . strtoupper($system) . "\n\n";

    echo "## Current version:\n";
    echo asString($updater->getCurrent($system)) . "\n\n";

    echo "## Latest version:\n";
    echo asString($updater->getLatest($system)) . "\n\n";

    echo "## Download link:\n";
    echo asString($updater->getLinkToLatest($system)) . "\n\n";

    echo "## Path:\n";
    echo asString($updater->getPath($system)) . "\n\n";

    // TODO: update $system
}
